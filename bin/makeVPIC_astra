#!/bin/bash

#set -x

##########################################################################################
# Set some high level variables.

ARCH=$1

FEAT=$2

BRANCH=$3

NJ=$4

VPIC_ROOT=$PWD

export VPIC_DIR=$VPIC_ROOT/build/$ARCH/vpic

##########################################################################################
# Switch to the build directory and copy the VPIC source.  First check for the
# existence of an old VPIC directory and remove it if it does exist.

cd build

if [ -d $ARCH ]
then
  rm -rf $ARCH
fi

mkdir $ARCH
cd $ARCH

cp -R $VPIC_ROOT/src/branches/$BRANCH/vpic .

cd $VPIC_DIR

##########################################################################################
# Execute some module commands which apply to all ARCH values.

echo '#!/bin/bash' >> bashrc.modules
echo '' >> bashrc.modules

module use /projects/lanl-artab/spack_arteam_modules/linux-rhel7-aarch64
echo "module use /projects/lanl-artab/spack_arteam_modules/linux-rhel7-aarch64" >> bashrc.modules

##########################################################################################
# Inspect the ARCH and FEAT variables to determine what kind of build we are doing.

################################################################################
# Figure out which compiler to use.

VCOM="ZZZ"

VPIC_COMPILER_C="cc"
VPIC_COMPILER_CXX="CC"

if echo $ARCH | grep -q "GNU"
then
    VCOM="GNU"

    if [ ! "x$VERSION_GNU" = "x" ]
    then
        module swap gnu7 gnu7/$VERSION_GNU
        echo "module swap gnu7 gnu7/$VERSION_GNU" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -Ofast -march=native -mcpu=native -mtune=native"
    FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_C_COMPILER+=" -Winline"
    #FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -Ofast -march=native -mcpu=native -mtune=native"
    FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_CXX_COMPILER+=" -Winline"
    #FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

if echo $ARCH | grep -q "ARM"
then
    VCOM="ARM"

    module swap gnu7 arm/19.2
    echo "module swap gnu7 arm/19.2" >> bashrc.modules

    if [ ! "x$VERSION_ARM" = "x" ]
    then
        module swap arm arm/$VERSION_ARM
        echo "module swap arm arm/$VERSION_ARM" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O3"
    #FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_C_COMPILER+=" -Winline"
    #FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O3"
    #FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_CXX_COMPILER+=" -Winline"
    #FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

################################################################################
# Figure out which MPI library to use.

VMPI="ZZZ"

if echo $ARCH | grep -q "OMPI"
then
    VMPI="OMPI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    #if [ ! "x$VERSION_OPENMPI" = "x" ]
    #then
    #    module swap openmpi openmpi/$VERSION_OPENMPI
    #    echo "module swap openmpi openmpi/$VERSION_OPENMPI" >> bashrc.modules
    #fi
fi

################################################################################
# Figure out which thread model to use.

VTHR="ZZZ"

if echo $ARCH | grep -q "_PTH_"
then
    VTHR="PTH"

    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if echo $ARCH | grep -q "_OMP_"
then
    VTHR="OMP"

    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

################################################################################
# Figure out if this is an optimized or debug build.

VOPT="ZZZ"

if echo $ARCH | grep -q "OPT"
then
    VOPT="OPT"
fi

if echo $ARCH | grep -q "DBG"
then
    VOPT="DBG"
fi

################################################################################
# Figure out which particle sort implementation to use.

if echo $ARCH | grep -q "LSORT"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_LEGACY_SORT"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_LEGACY_SORT"
fi

################################################################################
# Figure out if we are using AoSoA data format for particles.

if echo $ARCH | grep -q "AOSOA"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_AOSOA_P"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_AOSOA_P"

    if echo $ARCH | egrep -q "_DBG_V4_|_OPT_V4_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"
    fi

    if echo $ARCH | egrep -q "_DBG_V8_|_OPT_V8_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
    fi

    if echo $ARCH | egrep -q "_DBG_V16_|_OPT_V16_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
    fi
fi

################################################################################
# Figure out if this is a MAP build.

SET_SHARED_LIBS="OFF"

if echo $ARCH | grep -q "MAP"
then
    SET_SHARED_LIBS="ON"

    module load forge
    echo "module load forge" >> bashrc.modules

    if [ ! "x$VERSION_FORGE" = "x" ]
    then
        module swap forge forge/$VERSION_FORGE
        echo "module swap forge forge/$VERSION_FORGE" >> bashrc.modules
    fi
fi

################################################################################
# Figure out if this is a GPROF build.

if echo $ARCH | grep -q "GPROF"
then
    if echo $ARCH | grep -q "ARM"
    then
	FLAGS_C_COMPILER+=" -p"

	FLAGS_CXX_COMPILER+=" -p"
    fi

    if echo $ARCH | grep -q "GNU"
    then
	FLAGS_C_COMPILER+=" -pg"

	FLAGS_CXX_COMPILER+=" -pg"
    fi
fi

##########################################################################################
# Now, perform the selected build.

##########################################################################################
# Build an optimized version of VPIC.

if [ $ARCH = "ASTRA_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC.

if [ $ARCH = "ASTRA_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC.

if [ $ARCH = "ASTRA_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_NEON${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_NEON=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC.

if [ $ARCH = "ASTRA_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC.

if [ $ARCH = "ASTRA_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Done.
