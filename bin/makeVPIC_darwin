#!/bin/bash

#set -x

##########################################################################################
# Set some high level variables.

ARCH=$1

FEAT=$2

BRANCH=$3

NJ=$4

VPIC_ROOT=$PWD

export VPIC_DIR=$VPIC_ROOT/build/$ARCH/vpic

##########################################################################################
# Switch to the build directory and copy the VPIC source.  First check for the
# existence of an old VPIC directory and remove it if it does exist.

cd build

if [ -d $ARCH ]
then
  rm -rf $ARCH
fi

mkdir $ARCH
cd $ARCH

cp -R $VPIC_ROOT/src/branches/$BRANCH/vpic .

cd $VPIC_DIR

##########################################################################################
# Execute some module commands which apply to all ARCH values.

echo '#!/bin/bash' >> bashrc.modules
echo '' >> bashrc.modules

module purge
echo "module purge" >> bashrc.modules

if [ ! "x$VERSION_CMAKE" = "x" ]
then
    module load cmake/$VERSION_CMAKE
    echo "module load cmake/$VERSION_CMAKE" >> bashrc.modules
else
    module load cmake
    echo "module load cmake" >> bashrc.modules
fi

##########################################################################################
# Inspect the ARCH and FEAT variables to determine what kind of build we are doing.

################################################################################
# Figure out which type of Darwin node we are running on.

if echo $ARCH | egrep -q "INT_SNB"
then
    NODE="INT_SNB"
fi

if echo $ARCH | egrep -q "INT_IVY"
then
    NODE="INT_IVY"
fi

if echo $ARCH | egrep -q "INT_HSW"
then
    NODE="INT_HSW"
fi

if echo $ARCH | egrep -q "INT_BDW"
then
    NODE="INT_BDW"
fi

if echo $ARCH | egrep -q "INT_SKY"
then
    NODE="INT_SKY"
fi

if echo $ARCH | egrep -q "INT_KNL"
then
    NODE="INT_KNL"
fi

if echo $ARCH | egrep -q "IBM_PW8"
then
    NODE="IBM_PW8"
fi

if echo $ARCH | egrep -q "IBM_PW9"
then
    NODE="IBM_PW9"
fi

if echo $ARCH | egrep -q "AMD_NAP"
then
    NODE="AMD_NAP"
fi

if echo $ARCH | egrep -q "AMD_ROM"
then
    NODE="AMD_ROM"
fi

if echo $ARCH | egrep -q "ARM_TX2"
then
    NODE="ARM_TX2"
fi

################################################################################
# Figure out which compiler to use.

VCOM="ZZZ"

if echo $ARCH | egrep -q "INT_OPT|INT_DBG"
then
    VCOM="INT"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if [ ! "x$VERSION_INTEL" = "x" ]
    then
        module load intel/$VERSION_INTEL
        echo "module load intel/$VERSION_INTEL" >> bashrc.modules
    else
        module load intel
        echo "module load intel" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O3 -xhost"
    FLAGS_C_COMPILER+=" -qopenmp-simd"
    FLAGS_C_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_C_COMPILER+=" -qoverride-limits"
    FLAGS_C_COMPILER+=" -no-ansi-alias"
    FLAGS_C_COMPILER+=" -Wl,--export-dynamic"
    FLAGS_C_COMPILER+=" -Winline"
    FLAGS_C_COMPILER+=" -qopt-report=5"
    FLAGS_C_COMPILER+=" -qopt-report-phase=all"
    FLAGS_C_COMPILER+=" -qopt-report-annotate"
    FLAGS_C_COMPILER+=" -qopt-report-annotate-position=both"
    FLAGS_C_COMPILER+=" -diag-disable 10397"
    FLAGS_C_COMPILER+=" -fp-model strict"

    FLAGS_CXX_COMPILER="-g -O3 -xhost"
    FLAGS_CXX_COMPILER+=" -qopenmp-simd"
    FLAGS_CXX_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_CXX_COMPILER+=" -qoverride-limits"
    FLAGS_CXX_COMPILER+=" -no-ansi-alias"
    FLAGS_CXX_COMPILER+=" -Wl,--export-dynamic"
    FLAGS_CXX_COMPILER+=" -Winline"
    FLAGS_CXX_COMPILER+=" -qopt-report=5"
    FLAGS_CXX_COMPILER+=" -qopt-report-phase=all"
    FLAGS_CXX_COMPILER+=" -qopt-report-annotate"
    FLAGS_CXX_COMPILER+=" -qopt-report-annotate-position=both"
    FLAGS_CXX_COMPILER+=" -diag-disable 10397"
    FLAGS_CXX_COMPILER+=" -fp-model strict"

    if echo $ARCH | egrep -q "INT_SKY|INT_KNL"
    then
        FLAGS_C_COMPILER+=" -qopt-zmm-usage=high"

        FLAGS_CXX_COMPILER+=" -qopt-zmm-usage=high"
    fi

    if echo $ARCH | egrep -q "_DBG_V1_NONE_|_OPT_V1_NONE_"
    then
        FLAGS_C_COMPILER+=" -no-vec"

        FLAGS_CXX_COMPILER+=" -no-vec"
    fi
fi

if echo $ARCH | egrep -q "GNU_OPT|GNU_DBG"
then
    VCOM="GNU"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if echo $ARCH | egrep -q "ARM_TX2"
    then
        if [ ! "x$VERSION_GNU" = "x" ]
        then
            module load ThunderX2CN99/RHEL/7/gcc-$VERSION_GNU_ARM
            echo "module load ThunderX2CN99/RHEL/7/gcc-$VERSION_GNU_ARM" >> bashrc.modules
        else
            module load ThunderX2CN99/RHEL/7/gcc-8.2.0/armpl/19.1.0
            echo "module load ThunderX2CN99/RHEL/7/gcc-8.2.0/armpl/19.1.0" >> bashrc.modules
        fi
    else
        if [ ! "x$VERSION_GNU" = "x" ]
        then
            module load gcc/$VERSION_GNU
            echo "module load gcc/$VERSION_GNU" >> bashrc.modules
        else
            module load gcc
            echo "module load gcc" >> bashrc.modules
        fi
    fi

    #FLAGS_C_COMPILER="-g -O2"
    FLAGS_C_COMPILER="-g -Ofast"
    FLAGS_C_COMPILER+=" -fopenmp-simd"
    FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_C_COMPILER+=" -rdynamic"
    FLAGS_C_COMPILER+=" -Winline"
    #FLAGS_C_COMPILER+=" -fopt-info-all-optall"

    if echo $ARCH | egrep -q "INT_SNB|INT_IVY|INT_HSW|INT_BDW|INT_KNL"
    then
        FLAGS_C_COMPILER+=" -march=native"
        FLAGS_C_COMPILER+=" -mtune=native"
        FLAGS_C_COMPILER+=" -mdump-tune-features"
    fi

    if echo $ARCH | egrep -q "INT_SKY"
    then
        if echo $ARCH | egrep -q "_DBG_V16_|_OPT_V16_"
        then
            FLAGS_C_COMPILER+=" -march=skylake-avx512"
            FLAGS_C_COMPILER+=" -mtune=skylake-avx512"
            FLAGS_C_COMPILER+=" -mdump-tune-features"
	else
            FLAGS_C_COMPILER+=" -march=skylake"
            FLAGS_C_COMPILER+=" -mtune=skylake"
            FLAGS_C_COMPILER+=" -mdump-tune-features"
	fi
    fi

    if echo $ARCH | grep -q "IBM_PW9"
    then
        FLAGS_C_COMPILER+=" -maltivec"

        #FLAGS_C_COMPILER+=" -march=power9"
        #FLAGS_C_COMPILER+=" -mtune=power9"
    fi

    if echo $ARCH | egrep -q "ARM_TX2"
    then
        FLAGS_C_COMPILER+=" -mfpu=neon"
    #    FLAGS_C_COMPILER+=" -march=native"
    #    FLAGS_C_COMPILER+=" -march=native"
    #    FLAGS_C_COMPILER+=" -mtune=native"
    fi

    #FLAGS_CXX_COMPILER="-g -O2"
    FLAGS_CXX_COMPILER="-g -Ofast"
    FLAGS_CXX_COMPILER+=" -fopenmp-simd"
    FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_CXX_COMPILER+=" -rdynamic"
    FLAGS_CXX_COMPILER+=" -Winline"
    #FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"

    if echo $ARCH | egrep -q "INT_SNB|INT_IVY|INT_HSW|INT_BDW|INT_KNL"
    then
        FLAGS_CXX_COMPILER+=" -march=native"
        FLAGS_CXX_COMPILER+=" -mtune=native"
        FLAGS_CXX_COMPILER+=" -mdump-tune-features"
    fi

    if echo $ARCH | egrep -q "INT_SKY"
    then
        if echo $ARCH | egrep -q "_DBG_V16_|_OPT_V16_"
        then
            FLAGS_CXX_COMPILER+=" -march=skylake-avx512"
            FLAGS_CXX_COMPILER+=" -mtune=skylake-avx512"
            FLAGS_CXX_COMPILER+=" -mdump-tune-features"
	else
            FLAGS_CXX_COMPILER+=" -march=skylake"
            FLAGS_CXX_COMPILER+=" -mtune=skylake"
            FLAGS_CXX_COMPILER+=" -mdump-tune-features"
	fi
    fi

    if echo $ARCH | grep -q "IBM_PW9"
    then
        FLAGS_CXX_COMPILER+=" -maltivec"
        FLAGS_CXX_COMPILER+=" -std=gnu++11"

        #FLAGS_CXX_COMPILER+=" -march=power9"
        #FLAGS_CXX_COMPILER+=" -mtune=power9"
    fi

    if echo $ARCH | egrep -q "ARM_TX2"
    then
        FLAGS_CXX_COMPILER+=" -mfpu=neon"
    #    FLAGS_CXX_COMPILER+=" -march=native"
    #    FLAGS_CXX_COMPILER+=" -march=native"
    #    FLAGS_CXX_COMPILER+=" -mtune=native"
    fi
fi

if echo $ARCH | egrep -q "CLG_OPT|CLG_DBG"
then
    VCOM="CLG"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if echo $ARCH | grep -q "ARM"
    then
        if [ ! "x$VERSION_ARM_TX2" = "x" ]
        then
            module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/$VERSION_ARM_TX2
            echo "module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/$VERSION_ARM_TX2" >> bashrc.modules
        else
            module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/18.4.0
            echo "module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/18.4.0" >> bashrc.modules
        fi

        FLAGS_C_COMPILER="-g -O3"

        FLAGS_CXX_COMPILER="-g -O3"
    fi
fi

if echo $ARCH | egrep -q "IBM_OPT|IBM_DBG"
then
    VCOM="IBM"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if [ ! "x$VERSION_IBM" = "x" ]
    then
        module load ibm/$VERSION_IBM
        echo "module load ibm/$VERSION_IBM" >> bashrc.modules
    else
        module load ibm
        echo "module load ibm" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O4"
    #FLAGS_C_COMPILER+=" -mavx2 -mfma"
    #FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_C_COMPILER+=" -Winline"
    #FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O4"
    FLAGS_CXX_COMPILER+=" -Wc++11-narrowing"
    #FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_CXX_COMPILER+=" -Winline"
    #FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
    #FLAGS_CXX_COMPILER+=" -mavx2 -mfma"
fi

if echo $ARCH | egrep -q "PGI_OPT|PGI_DBG"
then
    VCOM="PGI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if [ ! "x$VERSION_PGI" = "x" ]
    then
        module load pgi/$VERSION_PGI
        echo "module load pgi/$VERSION_PGI" >> bashrc.modules
    else
        module load pgi
        echo "module load pgi" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O4"
    FLAGS_C_COMPILER+=" -Mvect=simd"
    FLAGS_C_COMPILER+=" -tp=pwr9"
    FLAGS_C_COMPILER+=" -D__ALTIVEC__"
    #FLAGS_C_COMPILER+=" -maltivec"
    #FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_C_COMPILER+=" -Winline"
    #FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O4"
    FLAGS_CXX_COMPILER+=" -Mvect=simd"
    FLAGS_CXX_COMPILER+=" -tp=pwr9"
    FLAGS_CXX_COMPILER+=" -D__ALTIVEC__"
    #FLAGS_CXX_COMPILER+=" -maltivec"
    #FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    #FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    #FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    #FLAGS_CXX_COMPILER+=" -Winline"
    #FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    #FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

if echo $ARCH | egrep -q "ARM_OPT|ARM_DBG"
then
    VCOM="ARM"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if [ ! "x$VERSION_ARM_TX2" = "x" ]
    then
        #module load ThunderX2CN99/RHEL/7/arm-linux-compiler-$VERSION_ARM_TX2
        #echo "module load ThunderX2CN99/RHEL/7/arm-linux-compiler-$VERSION_ARM_TX2" >> bashrc.modules

        module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-$VERSION_ARM_TX2
        echo "module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-$VERSION_ARM_TX2" >> bashrc.modules
    else
        module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/18.4.0
        echo "module load ThunderX2CN99/RHEL/7/arm-hpc-compiler-18.4/armpl/18.4.0" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -Ofast"
    #FLAGS_C_COMPILER="-g -O3"

    FLAGS_CXX_COMPILER="-g -Ofast"
    #FLAGS_CXX_COMPILER="-g -O3"

    # Build with OpenMP simd support.
    if echo $ARCH | egrep -q "_DBG_V1_VECT_|_OPT_V1_VECT_"
    then
        FLAGS_C_COMPILER+=" -fopenmp-simd -fsimdmath -ffp-contract=fast"
        #FLAGS_C_COMPILER+=" -fopenmp -fsimdmath -ffp-contract=fast"

        FLAGS_CXX_COMPILER+=" -fopenmp-simd -fsimdmath -ffp-contract=fast"
        #FLAGS_CXX_COMPILER+=" -fopenmp -fsimdmath -ffp-contract=fast"
    fi

    # Build with SVE support to use with ARMIE.
    if echo $ARCH | grep -q "SVE"
    then
        FLAGS_C_COMPILER+=" -march=armv8+sve -DARM_SVE"

        FLAGS_CXX_COMPILER+=" -march=armv8+sve -DARM_SVE"
    fi

    # Build with support to perform ARMIE collection of statistics.
    if echo $ARCH | grep -q "ARMIE_CENTER_P"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_ARMIE_CENTER_P"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_ARMIE_CENTER_P"

    elif echo $ARCH | grep -q "ARMIE_ADVANCE"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_ARMIE_ADVANCE"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_ARMIE_ADVANCE"

    elif echo $ARCH | grep -q "ARMIE"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_ARMIE"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_ARMIE"

    fi
fi

if echo $ARCH | egrep -q "AMD_OPT|AMD_DBG"
then
    VCOM="AMD"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    if [ ! "x$VERSION_AMD" = "x" ]
    then
        module load aocc/$VERSION_AMD
        echo "module load aocc/$VERSION_AMD" >> bashrc.modules
    else
        module load aocc/2.0.0
        echo "module load aocc/2.0.0" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -Ofast -finline-hint-functions"
    #FLAGS_C_COMPILER="-g -O3"

    FLAGS_CXX_COMPILER="-g -Ofast -finline-hint-functions"
    #FLAGS_CXX_COMPILER="-g -O3"

    if echo $ARCH | egrep -q "AMD_NAP"
    then
        FLAGS_C_COMPILER+=" -march=znver1"

        FLAGS_CXX_COMPILER+=" -march=znver1"
    fi

    if echo $ARCH | egrep -q "AMD_ROM"
    then
        FLAGS_C_COMPILER+=" -march=znver2"

        FLAGS_CXX_COMPILER+=" -march=znver2"
    fi

    # Build with OpenMP simd support.
    if echo $ARCH | egrep -q "_DBG_V1_VECT_|_OPT_V1_VECT_"
    then
        FLAGS_C_COMPILER+=" -fopenmp-simd"

        FLAGS_CXX_COMPILER+=" -fopenmp-simd"
    fi
fi

################################################################################
# Figure out which MPI library to use.

VMPI="ZZZ"

if echo $ARCH | grep -q "OMPI"
then
    VMPI="OMPI"

    if [ ! "x$VERSION_OPEN_MPI" = "x" ]
    then
        module load openmpi/$VERSION_OPEN_MPI
        echo "module load openmpi/$VERSION_OPEN_MPI" >> bashrc.modules
    else
        module load openmpi
        echo "module load openmpi" >> bashrc.modules
    fi
fi

if echo $ARCH | grep -q "IMPI"
then
    VMPI="IMPI"

    if echo $ARCH | egrep -q "INT_OPT|INT_DBG"
    then
        VPIC_COMPILER_C="mpiicc"
        VPIC_COMPILER_CXX="mpiicpc"
    else
        VPIC_COMPILER_C="mpicc"
        VPIC_COMPILER_CXX="mpicxx"
    fi
fi

################################################################################
# Figure out which thread model to use.

VTHR="ZZZ"

if echo $ARCH | grep -q "_PTH_"
then
    VTHR="PTH"

    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if echo $ARCH | grep -q "_OMP_"
then
    VTHR="OMP"

    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

################################################################################
# Figure out if this is an optimized or debug build.

VOPT="ZZZ"

if echo $ARCH | grep -q "OPT"
then
    VOPT="OPT"
fi

if echo $ARCH | grep -q "DBG"
then
    VOPT="DBG"
fi

################################################################################
# Figure out which particle sort implementation to use.

if echo $ARCH | grep -q "LSORT"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_LEGACY_SORT"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_LEGACY_SORT"
fi

################################################################################
# Figure out whether to swap init of MPI and Pthreads.

if echo $ARCH | grep -q "SWAP_PTH_INIT"
then
    FLAGS_C_COMPILER+=" -DVPIC_SWAP_MPI_PTHREAD_INIT"

    FLAGS_CXX_COMPILER+=" -DVPIC_SWAP_MPI_PTHREAD_INIT"
fi

################################################################################
# Figure out if we are using AoSoA data format for particles.

if echo $ARCH | grep -q "AOSOA"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_AOSOA_P"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_AOSOA_P"

    if echo $ARCH | egrep -q "_DBG_V4_|_OPT_V4_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"
    fi

    if echo $ARCH | egrep -q "_DBG_V8_|_OPT_V8_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
    fi

    if echo $ARCH | egrep -q "_DBG_V16_|_OPT_V16_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
    fi

    if echo $ARCH | egrep -q "_DBG_V1_|_OPT_V1_"
    then
        if echo $ARCH | egrep -q "INT_HSW"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
        fi

        if echo $ARCH | egrep -q "INT_BDW"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
        fi

        if echo $ARCH | egrep -q "INT_SKY"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
        fi

        if echo $ARCH | egrep -q "INT_KNL"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
        fi

        if echo $ARCH | egrep -q "IBM_PW9"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"
        fi

        if echo $ARCH | egrep -q "AMD_NAP"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
        fi

        if echo $ARCH | egrep -q "AMD_ROM"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"
        fi

        if echo $ARCH | egrep -q "ARM_TX2"
        then
            if echo $ARCH | grep -q "SVE"
            then
                if echo $ARCH | grep -q "SVE_04"
                then
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

                elif echo $ARCH | grep -q "SVE_08"
                then
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

                elif echo $ARCH | grep -q "SVE_16"
                then
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

                elif echo $ARCH | grep -q "SVE_32"
                then
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=32"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=32"

                elif echo $ARCH | grep -q "SVE_64"
                then
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=64"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=64"

                else
                    FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

                    FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"
                fi
            else
                FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

                FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"
            fi
        fi
    fi
fi

################################################################################
# Figure out if we are using compiler vectorization.

if echo $ARCH | egrep -q "_DBG_V1_VECT_|_OPT_V1_VECT_"
then
    if echo $ARCH | egrep -q "INT_HSW"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

    elif echo $ARCH | egrep -q "INT_BDW"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

    elif echo $ARCH | egrep -q "INT_SKY"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=16"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=16"

    elif echo $ARCH | egrep -q "INT_KNL"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=16"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=16"

    elif echo $ARCH | egrep -q "IBM_PW9"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=4"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=4"

    elif echo $ARCH | egrep -q "AMD_NAP"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

    elif echo $ARCH | egrep -q "AMD_ROM"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

    elif echo $ARCH | egrep -q "ARM_TX2"
    then
        if echo $ARCH | grep -q "SVE"
        then
            if echo $ARCH | grep -q "SVE_04"
            then
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=4"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=4"

            elif echo $ARCH | grep -q "SVE_08"
            then
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

            elif echo $ARCH | grep -q "SVE_16"
            then
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=16"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=16"

            elif echo $ARCH | grep -q "SVE_32"
            then
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=32"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=32"

            elif echo $ARCH | grep -q "SVE_64"
            then
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=64"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=64"

            else
                FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=4"

                FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=4"
            fi
        else
            FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=4"

            FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=4"
        fi

    else
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=4"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=4"
    fi
fi

################################################################################
# Figure out if we are using check points without reverse symbol table lookup
# support.

if echo $ARCH | grep -q "QRST"
then
    FLAGS_C_COMPILER+=" -DNO_REVERSE_SYMBOL_TABLE_LOOKUP_SUPPORT"

    FLAGS_CXX_COMPILER+=" -DNO_REVERSE_SYMBOL_TABLE_LOOKUP_SUPPORT"
fi

################################################################################
# Figure out if this is a VTUNE build.

SET_SHARED_LIBS="OFF"

if echo $ARCH | grep -q "VTUNE"
then
    SET_SHARED_LIBS="ON"

    FLAGS_C_COMPILER+=" -I$VTUNE_AMPLIFIER_2019_DIR/include"

    FLAGS_CXX_COMPILER+=" -I$VTUNE_AMPLIFIER_2019_DIR/include"

    if echo $ARCH | grep -q "VTUNE_ADVANCE"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"

    elif echo $ARCH | grep -q "VTUNE_CENTER_P"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_CENTER_P"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_CENTER_P"

    else
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_OFF"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_OFF"

    fi

    if echo $ARCH | egrep -q "INT_OPT|INT_DBG"
    then
	FLAGS_C_COMPILER+=" -debug inline-debug-info"
	FLAGS_C_COMPILER+=" -parallel-source-info=2"

	FLAGS_CXX_COMPILER+=" -debug inline-debug-info"
	FLAGS_CXX_COMPILER+=" -parallel-source-info=2"
    fi
fi

################################################################################
# Figure out if this is a LikWid build.

SET_SHARED_LIBS="OFF"

if echo $ARCH | grep -q "LIKWID"
then
    SET_SHARED_LIBS="ON"

    if [ ! "x$VERSION_LIKWID" = "x" ]
    then
        if echo $VERSION_LIKWID | grep -q "WDN_INTEL"
        then
            LIKWID_ROOT=/home/wdn/Packages/likwid/intel

            export PATH=$LIKWID_ROOT/bin:$PATH
            echo "export PATH=$LIKWID_ROOT/bin:$PATH" >> bashrc.modules

            export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH
            echo "export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH" >> bashrc.modules

        elif echo $VERSION_LIKWID | grep -q "WDN_ARM"
        then
            LIKWID_ROOT=/home/wdn/Packages/likwid/arm

            export PATH=$LIKWID_ROOT/bin:$PATH
            echo "export PATH=$LIKWID_ROOT/bin:$PATH" >> bashrc.modules

            export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH
            echo "export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH" >> bashrc.modules

        elif echo $VERSION_LIKWID | grep -q "WDN_POWER9"
        then
            LIKWID_ROOT=/home/wdn/Packages/likwid/power9

            export PATH=$LIKWID_ROOT/bin:$PATH
            echo "export PATH=$LIKWID_ROOT/bin:$PATH" >> bashrc.modules

            export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH
            echo "export LD_LIBRARY_PATH=$LIKWID_ROOT/lib:$LD_LIBRARY_PATH" >> bashrc.modules

        else
            module load likwid/$VERSION_LIKWID
            echo "module load likwid/$VERSION_LIKWID" >> bashrc.modules

        fi

    else
        module load likwid
        echo "module load likwid" >> bashrc.modules

    fi

    if echo $ARCH | grep -q "LIKWID_ADVANCE"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_LIKWID_ADVANCE -DLIKWID_PERFMON"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_LIKWID_ADVANCE -DLIKWID_PERFMON"

    elif echo $ARCH | grep -q "LIKWID_CENTER_P"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_LIKWID_CENTER_P -DLIKWID_PERFMON"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_LIKWID_CENTER_P -DLIKWID_PERFMON"

    else
        FLAGS_C_COMPILER+=" -DVPIC_USE_LIKWID_OFF"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_LIKWID_OFF"

    fi

    FLAGS_C_COMPILER+=" -I$LIKWID_ROOT/include"

    FLAGS_CXX_COMPILER+=" -I$LIKWID_ROOT/include"
fi

################################################################################
# Figure out if this is a MAP build.

if echo $ARCH | grep -q "MAP"
then
    SET_SHARED_LIBS="ON"

    if [ ! "x$VERSION_FORGE" = "x" ]
    then
        module load forge/$VERSION_FORGE
        echo "module load forge/$VERSION_FORGE" >> bashrc.modules
    else
	module load forge
	echo "module load forge" >> bashrc.modules
    fi
fi

################################################################################
# Figure out if this is a GPROF build.

if echo $ARCH | grep -q "GPROF"
then
    if echo $ARCH | egrep -q "INT_OPT|INT_DBG"
    then
	FLAGS_C_COMPILER+=" -p"

	FLAGS_CXX_COMPILER+=" -p"
    fi

    if echo $ARCH | egrep -q "GNU_OPT|GNU_DBG"
    then
	FLAGS_C_COMPILER+=" -pg"

	FLAGS_CXX_COMPILER+=" -pg"
    fi
fi

##########################################################################################
# Now, perform the selected build.

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_VECT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_SSE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_SSE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_AVX512${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DUSE_V16_AVX512=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with GNU compilers for IBM Power 9.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_ALTIVEC${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_ALTIVEC=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC for ARM TX2 with V4 NEON intrinsics support.

if [ $ARCH = "DARWIN_${NODE}_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_NEON${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DENABLE_UNIT_TESTS=OFF \
	-DENABLE_COLOR_UNIT_TESTS=OFF \
	-DENABLE_INTEGRATED_TESTS=OFF \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_NEON=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \
