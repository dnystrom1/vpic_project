#!/bin/bash

set -x

##########################################################################################
# Set some high level variables.

ARCH=$1

FEAT=$2

BRANCH=$3

NJ=$4

VPIC_ROOT=$PWD

export VPIC_DIR=$VPIC_ROOT/build/$ARCH/vpic

##########################################################################################
# Switch to the build directory and copy the VPIC source.  First check for the
# existence of an old VPIC directory and remove it if it does exist.

cd build

if [ -d $ARCH ]; then
  rm -rf $ARCH
fi

mkdir $ARCH
cd $ARCH

cp -R $VPIC_ROOT/src/branches/$BRANCH/vpic .

cd $VPIC_DIR

##########################################################################################
# Set some high level variables to control module versions.

VERSION_CMAKE=3.9.2
VERSION_GNU=7.1.0

VERSION_OPENMPI=2.1.1

##########################################################################################
# Execute some module commands which apply to all ARCH values.

module load cmake
module swap cmake cmake/$VERSION_CMAKE

##########################################################################################
# Inspect the ARCH and FEAT variables to determine what kind of build we are doing.

################################################################################
# Figure out which compiler to use.

VCOM="ZZZ"

VPIC_COMPILER_C="gcc"
VPIC_COMPILER_CXX="g++"

if echo $ARCH | grep -q "GNU"
then
    VCOM="GNU"

    module load gcc
    module swap gcc gcc/$VERSION_GNU

    FLAGS_C_COMPILER="-g -O2"
    FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_C_COMPILER+=" -Winline"
#   FLAGS_C_COMPILER+=" -fopt-info-all-optall"

    FLAGS_CXX_COMPILER="-g -O2"
    FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_CXX_COMPILER+=" -Winline"
    FLAGS_CXX_COMPILER+=" -std=gnu+11"
#   FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"

    if echo $ARCH | grep -q "V4_ALTIVEC"
    then
        FLAGS_C_COMPILER+=" -maltivec"

        FLAGS_CXX_COMPILER+=" -maltivec"
    fi
fi

################################################################################
# Figure out which MPI library to use.

VMPI="ZZZ"

if echo $ARCH | grep -q "OMPI"
then
    VMPI="OMPI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    module load openmpi
    module swap openmpi openmpi/$VERSION_OPENMPI
fi

if echo $ARCH | grep -q "SMPI"
then
    VMPI="SMPI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"
fi

################################################################################
# Figure out which thread model to use.

VTHR="ZZZ"

if echo $ARCH | grep -q "_PTH_"
then
    VTHR="PTH"

    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if echo $ARCH | grep -q "_OMP_"
then
    VTHR="OMP"

    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

################################################################################
# Figure out if this is an optimized or debug build.

VOPT="ZZZ"

if echo $ARCH | grep -q "OPT"
then
    VOPT="OPT"
fi

if echo $ARCH | grep -q "DBG"
then
    VOPT="DBG"
fi

################################################################################
# Figure out which particle sort implementation to use.

if echo $ARCH | grep -q "LSORT"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_LEGACY_SORT"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_LEGACY_SORT"
fi

##########################################################################################
# Now, perform the selected build.

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "SUMMITDEV_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DENABLE_KOKKOS=OFF \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "SUMMITDEV_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DENABLE_KOKKOS=OFF \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "SUMMITDEV_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_ALTIVEC${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_ALTIVEC=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DENABLE_KOKKOS=OFF \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi
