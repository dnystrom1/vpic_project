#!/bin/bash

#set -x

##########################################################################################
# Set some high level variables.

ARCH=$1

FEAT=$2

BRANCH=$3

NJ=$4

VPIC_ROOT=$PWD

export VPIC_DIR=$VPIC_ROOT/build/$ARCH/vpic

##########################################################################################
# Switch to the build directory and copy the VPIC source.  First check for the
# existence of an old VPIC directory and remove it if it does exist.

cd build

if [ -d $ARCH ]; then
  rm -rf $ARCH
fi

mkdir $ARCH
cd $ARCH

cp -R $VPIC_ROOT/src/branches/$BRANCH/vpic .

cd $VPIC_DIR

##########################################################################################
# Set some high level variables to control module versions.

VERSION_CMAKE=3.7.1
VERSION_INTEL=17.0.4
VERSION_CRAY=8.5.8
VERSION_GNU=6.3.0
VERSION_CRAY_MPICH=7.5.4
VERSION_CRAY_PERF_TOOLS=6.4.6

VERSION_INTEL_PERF_TOOLS=2017.4.056
#VERSION_INTEL_PERF_TOOLS=2017.4.196
#VERSION_INTEL_PERF_TOOLS=2018.0.082

VERSION_OPENMPI=2.1.1

##########################################################################################
# Execute some module commands which apply to all ARCH values.

module load friendly-testing
module load sandbox
module load cmake
module swap cmake cmake/$VERSION_CMAKE

module unload craype-hugepages2M

##########################################################################################
# Inspect the ARCH and FEAT variables to determine what kind of build we are doing.

################################################################################
# Figure out which compiler to use.

VCOM="ZZZ"

VPIC_COMPILER_C="cc"
VPIC_COMPILER_CXX="CC"

if echo $ARCH | grep -q "INT"
then
    VCOM="INT"

    module swap intel intel/$VERSION_INTEL

    FLAGS_C_COMPILER="-g -O3"
    FLAGS_C_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_C_COMPILER+=" -qoverride-limits"
    FLAGS_C_COMPILER+=" -no-ansi-alias"
    FLAGS_C_COMPILER+=" -Winline -craype-verbose"
    FLAGS_C_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O3"
    FLAGS_CXX_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_CXX_COMPILER+=" -qoverride-limits"
    FLAGS_CXX_COMPILER+=" -no-ansi-alias"
    FLAGS_CXX_COMPILER+=" -Winline -craype-verbose"
    FLAGS_CXX_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

if echo $ARCH | grep -q "GNU"
then
    VCOM="GNU"

    FLAGS_C_COMPILER="-g -O2"
    FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_C_COMPILER+=" -Winline"
#   FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O2"
    FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_CXX_COMPILER+=" -Winline"
#   FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"

    if echo $ARCH | grep -q "KNL"
    then
	FLAGS_C_COMPILER+=" -mavx2 -mfma"

	FLAGS_CXX_COMPILER+=" -mavx2 -mfma"
    else
	FLAGS_C_COMPILER+=" -mavx2 -mfma"

	FLAGS_CXX_COMPILER+=" -mavx2 -mfma"
    fi
fi

if echo $ARCH | grep -q "CCE"
then
    VCOM="CCE"

    FLAGS_C_COMPILER="-O2 -hlist=ad -hipa5"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-O2 -hlist=ad -hipa5"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

################################################################################
# Figure out if the compile is for KNL.

if echo $ARCH | grep -q "KNL"
then
    module swap craype-haswell craype-mic-knl
fi

################################################################################
# Figure out which MPI library to use.

VMPI="ZZZ"

if echo $ARCH | grep -q "CMPI"
then
    VMPI="CMPI"

    module swap cray-mpich cray-mpich/$VERSION_CRAY_MPICH

    export MPI_ROOT=$MPICH_DIR
fi

if echo $ARCH | grep -q "OMPI"
then
    VMPI="OMPI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    module unload cray-mpich
    module unload cray-libsci
    module load openmpi
    module swap openmpi openmpi/$VERSION_OPENMPI
fi

################################################################################
# Figure out which thread model to use.

VTHR="ZZZ"

if echo $ARCH | grep -q "_PTH_"
then
    VTHR="PTH"

    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if echo $ARCH | grep -q "_OMP_"
then
    VTHR="OMP"

    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

################################################################################
# Figure out if this is an optimized or debug build.

VOPT="ZZZ"

if echo $ARCH | grep -q "OPT"
then
    VOPT="OPT"
fi

if echo $ARCH | grep -q "DBG"
then
    VOPT="DBG"
fi

################################################################################
# Figure out if this is a VTUNE build.

SET_SHARED_LIBS="OFF"

if echo $ARCH | grep -q "VTUNE"
then
    SET_SHARED_LIBS="ON"

    #FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE_P"
    #FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"
    FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_OFF"
    FLAGS_C_COMPILER+=" -I$VTUNE_AMPLIFIER_XE_2017_DIR/include"

    #FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE_P"
    #FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"
    FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_OFF"
    FLAGS_CXX_COMPILER+=" -I$VTUNE_AMPLIFIER_XE_2017_DIR/include"

    if echo $ARCH | grep -q "INT"
    then
	FLAGS_C_COMPILER+=" -debug inline-debug-info"
	FLAGS_C_COMPILER+=" -parallel-source-info=2"

	FLAGS_CXX_COMPILER+=" -debug inline-debug-info"
	FLAGS_CXX_COMPILER+=" -parallel-source-info=2"

	module load intel-performance-tools
	module swap intel-performance-tools intel-performance-tools/$VERSION_INTEL_PERF_TOOLS
    fi
fi

################################################################################
# Figure out which particle sort implementation to use.

if echo $ARCH | grep -q "LSORT"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_LEGACY_SORT"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_LEGACY_SORT"
fi

##########################################################################################
# Now, perform the selected build.

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_SSE_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_SSE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_AVX2_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_AVX2_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT_HSW${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_SSE_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_SSE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_AVX2_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_AVX2_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITITE_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_AVX512_KNL${FEAT}" ]
then
    module list

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DENABLE_COLOR_UNIT_TESTS=ON \
	-DENABLE_INTEGRATED_TESTS=ON \
	-DENABLE_UNIT_TESTS=ON \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DUSE_V16_AVX512=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi
