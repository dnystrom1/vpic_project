#!/bin/bash

#set -x

##########################################################################################
# Set some high level variables.

ARCH=$1

FEAT=$2

BRANCH=$3

NJ=$4

VPIC_ROOT=$PWD

export VPIC_DIR=$VPIC_ROOT/build/$ARCH/vpic

##########################################################################################
# Switch to the build directory and copy the VPIC source.  First check for the
# existence of an old VPIC directory and remove it if it does exist.

cd build

if [ -d $ARCH ]
then
  rm -rf $ARCH
fi

mkdir $ARCH
cd $ARCH

cp -R $VPIC_ROOT/src/branches/$BRANCH/vpic .

cd $VPIC_DIR

##########################################################################################
# Execute some module commands which apply to all ARCH values.

echo '#!/bin/bash' >> bashrc.modules
echo '' >> bashrc.modules

module load friendly-testing
echo "module load friendly-testing" >> bashrc.modules

module load sandbox
echo "module load sandbox" >> bashrc.modules

module load cmake
echo "module load cmake" >> bashrc.modules

if [ ! "x$VERSION_CMAKE" = "x" ]
then
    module swap cmake cmake/$VERSION_CMAKE
    echo "module swap cmake cmake/$VERSION_CMAKE" >> bashrc.modules
fi

module unload craype-hugepages2M
echo "module unload craype-hugepages2M" >> bashrc.modules

##########################################################################################
# Inspect the ARCH and FEAT variables to determine what kind of build we are doing.

################################################################################
# Figure out which compiler to use.

VCOM="ZZZ"

VPIC_COMPILER_C="cc"
VPIC_COMPILER_CXX="CC"

if echo $ARCH | grep -q "INT"
then
    VCOM="INT"

    if [ ! "x$VERSION_INTEL" = "x" ]
    then
        module swap intel intel/$VERSION_INTEL
        echo "module swap intel intel/$VERSION_INTEL" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O3"
    FLAGS_C_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_C_COMPILER+=" -qoverride-limits"
    FLAGS_C_COMPILER+=" -no-ansi-alias"
    FLAGS_C_COMPILER+=" -Winline -craype-verbose"
    FLAGS_C_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"
    FLAGS_C_COMPILER+=" -qopt-zmm-usage=high"
    FLAGS_C_COMPILER+=" -diag-disable 10397"

    FLAGS_CXX_COMPILER="-g -O3"
    FLAGS_CXX_COMPILER+=" -inline-forceinline -vec-threshold0"
    FLAGS_CXX_COMPILER+=" -qoverride-limits"
    FLAGS_CXX_COMPILER+=" -no-ansi-alias"
    FLAGS_CXX_COMPILER+=" -Winline -craype-verbose"
    FLAGS_CXX_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
    FLAGS_CXX_COMPILER+=" -qopt-zmm-usage=high"
    FLAGS_CXX_COMPILER+=" -diag-disable 10397"

    if echo $ARCH | grep -q "COM_FLAGS_01"
    then
        FLAGS_C_COMPILER="-g -O3"
        FLAGS_C_COMPILER+=" -inline-forceinline -vec-threshold0"
        FLAGS_C_COMPILER+=" -qoverride-limits"
        FLAGS_C_COMPILER+=" -no-ansi-alias"
        FLAGS_C_COMPILER+=" -Winline -craype-verbose"
        FLAGS_C_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
        FLAGS_C_COMPILER+=" -rdynamic -dynamic"
        FLAGS_C_COMPILER+=" -qopt-prefetch=2"
        FLAGS_C_COMPILER+=" -qopt-zmm-usage=high"
        FLAGS_C_COMPILER+=" -diag-disable 10397"

        FLAGS_CXX_COMPILER="-g -O3"
        FLAGS_CXX_COMPILER+=" -inline-forceinline -vec-threshold0"
        FLAGS_CXX_COMPILER+=" -qoverride-limits"
        FLAGS_CXX_COMPILER+=" -no-ansi-alias"
        FLAGS_CXX_COMPILER+=" -Winline -craype-verbose"
        FLAGS_CXX_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
        FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
        FLAGS_CXX_COMPILER+=" -qopt-prefetch=2"
        FLAGS_CXX_COMPILER+=" -qopt-zmm-usage=high"
        FLAGS_CXX_COMPILER+=" -diag-disable 10397"
    fi

    if echo $ARCH | grep -q "COM_FLAGS_02"
    then
        FLAGS_C_COMPILER="-g -O3"
        FLAGS_C_COMPILER+=" -inline-forceinline -vec-threshold0"
        FLAGS_C_COMPILER+=" -qoverride-limits"
        FLAGS_C_COMPILER+=" -no-ansi-alias"
        FLAGS_C_COMPILER+=" -Winline -craype-verbose"
        FLAGS_C_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
        FLAGS_C_COMPILER+=" -rdynamic -dynamic"
        FLAGS_C_COMPILER+=" -DVPIC_SWAP_MPI_PTHREAD_INIT"
        FLAGS_C_COMPILER+=" -qopt-zmm-usage=high"
        FLAGS_C_COMPILER+=" -diag-disable 10397"

        FLAGS_CXX_COMPILER="-g -O3"
        FLAGS_CXX_COMPILER+=" -inline-forceinline -vec-threshold0"
        FLAGS_CXX_COMPILER+=" -qoverride-limits"
        FLAGS_CXX_COMPILER+=" -no-ansi-alias"
        FLAGS_CXX_COMPILER+=" -Winline -craype-verbose"
        FLAGS_CXX_COMPILER+=" -qopt-report=5 -qopt-report-phase=all"
        FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
        FLAGS_CXX_COMPILER+=" -DVPIC_SWAP_MPI_PTHREAD_INIT"
        FLAGS_CXX_COMPILER+=" -qopt-zmm-usage=high"
        FLAGS_CXX_COMPILER+=" -diag-disable 10397"
    fi

    if echo $ARCH | egrep -q "_DBG_V1_NONE_|_OPT_V1_NONE_"
    then
        FLAGS_C_COMPILER+=" -no-vec"

        FLAGS_CXX_COMPILER+=" -no-vec"
    fi
fi

if echo $ARCH | grep -q "GNU"
then
    VCOM="GNU"

    module swap PrgEnv-intel PrgEnv-gnu
    echo "module swap PrgEnv-intel PrgEnv-gnu" >> bashrc.modules

    if [ ! "x$VERSION_GNU" = "x" ]
    then
        module swap gcc gcc/$VERSION_GNU
        echo "module swap gcc gcc/$VERSION_GNU" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-g -O2"
    FLAGS_C_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_C_COMPILER+=" -fno-strict-aliasing"
    FLAGS_C_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_C_COMPILER+=" -Winline"
#   FLAGS_C_COMPILER+=" -fopt-info-all-optall"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-g -O2"
    FLAGS_CXX_COMPILER+=" -ffast-math -fomit-frame-pointer"
    FLAGS_CXX_COMPILER+=" -fno-strict-aliasing"
    FLAGS_CXX_COMPILER+=" -fno-unsafe-math-optimizations"
    FLAGS_CXX_COMPILER+=" -Winline"
#   FLAGS_CXX_COMPILER+=" -fopt-info-all-optall"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"

    if echo $ARCH | grep -q "KNL"
    then
	FLAGS_C_COMPILER+=" -mavx2 -mfma"

	FLAGS_CXX_COMPILER+=" -mavx2 -mfma"
    else
	FLAGS_C_COMPILER+=" -mavx2 -mfma"

	FLAGS_CXX_COMPILER+=" -mavx2 -mfma"
    fi
fi

if echo $ARCH | grep -q "CCE"
then
    VCOM="CCE"

    module swap PrgEnv-intel PrgEnv-cray
    echo "module swap PrgEnv-intel PrgEnv-cray" >> bashrc.modules

    if [ ! "x$VERSION_CCE" = "x" ]
    then
        module swap cce cce/$VERSION_CCE
        echo "module swap cce cce/$VERSION_CCE" >> bashrc.modules
    fi

    FLAGS_C_COMPILER="-O2 -hlist=ad -hipa5"
    FLAGS_C_COMPILER+=" -rdynamic -dynamic"

    FLAGS_CXX_COMPILER="-O2 -hlist=ad -hipa5"
    FLAGS_CXX_COMPILER+=" -rdynamic -dynamic"
fi

################################################################################
# Figure out if the compile is for KNL.

if echo $ARCH | grep -q "KNL"
then
    module swap craype-haswell craype-mic-knl
    echo "module swap craype-haswell craype-mic-knl" >> bashrc.modules
fi

################################################################################
# Figure out which MPI library to use.

VMPI="ZZZ"

if echo $ARCH | grep -q "CMPI"
then
    VMPI="CMPI"

    if [ ! "x$VERSION_CRAY_MPICH" = "x" ]
    then
        module swap cray-mpich cray-mpich/$VERSION_CRAY_MPICH
        echo "module swap cray-mpich cray-mpich/$VERSION_CRAY_MPICH" >> bashrc.modules
    fi

    export MPI_ROOT=$MPICH_DIR
fi

if echo $ARCH | grep -q "OMPI"
then
    VMPI="OMPI"

    VPIC_COMPILER_C="mpicc"
    VPIC_COMPILER_CXX="mpicxx"

    module unload cray-mpich
    echo "module unload cray-mpich" >> bashrc.modules

    module unload cray-libsci
    echo "module unload cray-libsci" >> bashrc.modules

    module load openmpi
    echo "module load openmpi" >> bashrc.modules

    if [ ! "x$VERSION_OPENMPI" = "x" ]
    then
        module swap openmpi openmpi/$VERSION_OPENMPI
        echo "module swap openmpi openmpi/$VERSION_OPENMPI" >> bashrc.modules
    fi
fi

################################################################################
# Figure out which thread model to use.

VTHR="ZZZ"

if echo $ARCH | grep -q "_PTH_"
then
    VTHR="PTH"

    SET_OPENMP="OFF"
    SET_PTHREADS="ON"
fi

if echo $ARCH | grep -q "_OMP_"
then
    VTHR="OMP"

    SET_OPENMP="ON"
    SET_PTHREADS="OFF"
fi

################################################################################
# Figure out if this is an optimized or debug build.

VOPT="ZZZ"

if echo $ARCH | grep -q "OPT"
then
    VOPT="OPT"
fi

if echo $ARCH | grep -q "DBG"
then
    VOPT="DBG"
fi

################################################################################
# Figure out which particle sort implementation to use.

if echo $ARCH | grep -q "LSORT"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_LEGACY_SORT"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_LEGACY_SORT"
fi

################################################################################
# Figure out if we are using AoSoA data format for particles.

if echo $ARCH | grep -q "AOSOA"
then
    FLAGS_C_COMPILER+=" -DVPIC_USE_AOSOA_P"

    FLAGS_CXX_COMPILER+=" -DVPIC_USE_AOSOA_P"

    if echo $ARCH | egrep -q "_DBG_V4_|_OPT_V4_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=4"

    elif echo $ARCH | egrep -q "_DBG_V8_|_OPT_V8_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

    elif echo $ARCH | egrep -q "_DBG_V16_|_OPT_V16_"
    then
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

    elif echo $ARCH | egrep -q "_DBG_V1_|_OPT_V1_"
    then
        if echo $ARCH | grep -q "KNL"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

        elif echo $ARCH | grep -q "HSW"
        then
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=8"

        else
            FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

            FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
        fi

    else
        FLAGS_C_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"

        FLAGS_CXX_COMPILER+=" -DPARTICLE_BLOCK_SIZE=16"
    fi
fi

################################################################################
# Figure out if we are using compiler vectorization.

if echo $ARCH | egrep -q "_DBG_V1_VECT_|_OPT_V1_VECT_"
then
    if echo $ARCH | egrep -q "HSW"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"

    elif echo $ARCH | egrep -q "KNL"
    then
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=16"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=16"

    else
        FLAGS_C_COMPILER+=" -DVPIC_SIMD_LEN=8"

        FLAGS_CXX_COMPILER+=" -DVPIC_SIMD_LEN=8"
    fi
fi

################################################################################
# Figure out if this is a VTUNE build.

SET_SHARED_LIBS="OFF"

if echo $ARCH | grep -q "VTUNE"
then
    SET_SHARED_LIBS="ON"

    FLAGS_C_COMPILER+=" -I$VTUNE_AMPLIFIER_2019_DIR/include"

    FLAGS_CXX_COMPILER+=" -I$VTUNE_AMPLIFIER_2019_DIR/include"

    if echo $ARCH | grep -q "VTUNE_ADVANCE"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_ADVANCE"

    elif echo $ARCH | grep -q "VTUNE_CENTER_P"
    then
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_CENTER_P"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_CENTER_P"

    else
        FLAGS_C_COMPILER+=" -DVPIC_USE_VTUNE_OFF"

        FLAGS_CXX_COMPILER+=" -DVPIC_USE_VTUNE_OFF"

    fi

    module load intel-vtune-amplifier
    echo "module load intel-vtune-amplifier" >> bashrc.modules

    if [ ! "x$VERSION_INTEL_VTUNE_AMPLIFIER" = "x" ]
    then
        module swap intel-vtune-amplifier intel-vtune-amplifier/$VERSION_INTEL_VTUNE_AMPLIFIER
        echo "module swap intel-vtune-amplifier intel-vtune-amplifier/$VERSION_INTEL_VTUNE_AMPLIFIER" >> bashrc.modules
    fi

    module load intel-advisor
    echo "module load intel-advisor" >> bashrc.modules

    if [ ! "x$VERSION_INTEL_VECTOR_ADVISOR" = "x" ]
    then
        module swap intel-advisor intel-advisor/$VERSION_INTEL_VECTOR_ADVISOR
        echo "module swap intel-advisor intel-advisor/$VERSION_INTEL_VECTOR_ADVISOR" >> bashrc.modules
    fi

    module load intel-inspector
    echo "module load intel-inspector" >> bashrc.modules

    if [ ! "x$VERSION_INTEL_INSPECTOR" = "x" ]
    then
        module swap intel-inspector intel-inspector/$VERSION_INTEL_INSPECTOR
        echo "module swap intel-inspector intel-inspector/$VERSION_INTEL_INSPECTOR" >> bashrc.modules
    fi

    module load intel-trace-analyzer
    echo "module load intel-trace-analyzer" >> bashrc.modules

    if [ ! "x$VERSION_INTEL_TRACE_ANALYZER" = "x" ]
    then
        module swap intel-trace-analyzer intel-trace-analyzer/$VERSION_INTEL_TRACE_ANALYZER
        echo "module swap intel-trace-analyzer intel-trace-analyzer/$VERSION_INTEL_TRACE_ANALYZER" >> bashrc.modules
    fi

    if echo $ARCH | grep -q "INT"
    then
	FLAGS_C_COMPILER+=" -debug inline-debug-info"
	FLAGS_C_COMPILER+=" -parallel-source-info=2"

	FLAGS_CXX_COMPILER+=" -debug inline-debug-info"
	FLAGS_CXX_COMPILER+=" -parallel-source-info=2"
    fi
fi

################################################################################
# Figure out if this is a MAP build.

if echo $ARCH | grep -q "MAP"
then
    SET_SHARED_LIBS="ON"

    module load forge
    echo "module load forge" >> bashrc.modules

    if [ ! "x$VERSION_FORGE" = "x" ]
    then
        module swap forge forge/$VERSION_FORGE
        echo "module swap forge forge/$VERSION_FORGE" >> bashrc.modules
    fi
fi

################################################################################
# Figure out if this is a GPROF build.

if echo $ARCH | grep -q "GPROF"
then
    if echo $ARCH | grep -q "INT"
    then
	FLAGS_C_COMPILER+=" -p"

	FLAGS_CXX_COMPILER+=" -p"
    fi

    if echo $ARCH | grep -q "GNU"
    then
	FLAGS_C_COMPILER+=" -pg"

	FLAGS_CXX_COMPILER+=" -pg"
    fi

    if echo $ARCH | grep -q "CCE"
    then
	FLAGS_C_COMPILER+=" -pg"

	FLAGS_CXX_COMPILER+=" -pg"
    fi
fi

################################################################################
# Figure out if this is a CrayPat build.

if echo $ARCH | grep -q "CPAT"
then
    if [ ! "x$VERSION_CRAY_PERF_TOOLS" = "x" ]
    then
        module swap perftools-base perftools-base/$VERSION_CRAY_PERF_TOOLS
        echo "module swap perftools-base perftools-base/$VERSION_CRAY_PERF_TOOLS" >> bashrc.modules
    fi

    if echo $ARCH | grep -q "CPAT_LITE"
    then
        if echo $ARCH | grep -q "CPAT_LITE_LOOPS"
        then
            module load perftools-lite-loops
            echo "module load perftools-lite-loops" >> bashrc.modules
        elif echo $ARCH | grep -q "CPAT_LITE_HBM"
        then
	    SET_SHARED_LIBS="ON"

            #FLAGS_LD="-dynamic"

            module load perftools-lite-hbm
            echo "module load perftools-lite-hbm" >> bashrc.modules
        else
            module load perftools-lite
            echo "module load perftools-lite" >> bashrc.modules
        fi
    else
       module load perftools
       echo "module load perftools" >> bashrc.modules
    fi
fi

##########################################################################################
# Now, perform the selected build.

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_VECT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_SSE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_SSE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_HSW_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_NONE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V1_VECT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_SSE${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_SSE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V4_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V8_AVX2${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_PORT${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_PORTABLE=ON \
	-DUSE_V8_PORTABLE=ON \
	-DUSE_V16_PORTABLE=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \

##########################################################################################
# Build an optimized version of VPIC with Intel compilers.

if [ $ARCH = "TRINITY_KNL_${VMPI}_${VTHR}_${VCOM}_${VOPT}_V16_AVX512${FEAT}" ]
then
    module list
    echo "module list" >> bashrc.modules

    cd $VPIC_DIR
    mkdir build
    cd build
    cmake \
	-LAH \
	-DCMAKE_BUILD_TYPE=None \
	-DBUILD_SHARED_LIBS=$SET_SHARED_LIBS \
	-DUSE_V4_AVX2=ON \
	-DUSE_V8_AVX2=ON \
	-DUSE_V16_AVX512=ON \
	-DVPIC_PRINT_MORE_DIGITS=ON \
	-DUSE_OPENMP=$SET_OPENMP \
	-DUSE_PTHREADS=$SET_PTHREADS \
	-DCMAKE_C_COMPILER=$VPIC_COMPILER_C \
	-DCMAKE_CXX_COMPILER=$VPIC_COMPILER_CXX \
	-DCMAKE_C_FLAGS="$FLAGS_C_COMPILER" \
	-DCMAKE_CXX_FLAGS="$FLAGS_CXX_COMPILER" \
	..
    make -j $NJ VERBOSE=1
fi

#	-DENABLE_COLOR_UNIT_TESTS=ON \
#	-DENABLE_INTEGRATED_TESTS=ON \
#	-DENABLE_UNIT_TESTS=ON \
